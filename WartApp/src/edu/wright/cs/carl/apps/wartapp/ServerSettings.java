/*
 * ServerSettings.java
 *
 * Created on December 7, 2008, 9:01 PM
 */

package edu.wright.cs.carl.apps.wartapp;

import java.io.IOException;

import java.rmi.RemoteException;

import java.util.Iterator;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


import org.jdesktop.application.Action;

import edu.wright.cs.carl.net.connection.ConnectionListener;
import edu.wright.cs.carl.net.connection.ConnectionListenerManager;

import edu.wright.cs.carl.net.server.Server;
import edu.wright.cs.carl.net.server.ServerException;

import edu.wright.cs.carl.net.rmi.RMIConnectionListener;

/**
 *
 * @author  Duane
 */
public class ServerSettings extends javax.swing.JDialog {

    private WartConfig config;
    private ConnectionListenerManager listeners;
    private Server server;
    
    /** Creates new form ServerSettings */
    public ServerSettings()
    {
        super(WartApp.getApplication().getMainFrame(), true);
        
        this.config = WartApp.getApplication().getConfiguration();
        this.listeners = WartApp.getApplication().getListeners();
        this.server = WartApp.getApplication().getServer();
        
        initComponents();

        if(this.listeners.isRunning()) {
            this.serverRunningWarning.setText("<html><i>Changes will not be applied until server is restarted.</i>");
        }
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        serverName = new javax.swing.JTextField();
        serverPort = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        autostartServer = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        serverProtocolComboBox = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        maxConnections = new javax.swing.JTextField();
        serverRunningWarning = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.wright.cs.carl.apps.wartapp.WartApp.class).getContext().getResourceMap(ServerSettings.class);
        setTitle(resourceMap.getString("ServerSettingsForm.title")); // NOI18N
        setName("ServerSettingsForm"); // NOI18N
        setResizable(false);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        serverName.setText(this.config.getServerName());
        serverName.setName("serverName"); // NOI18N

        serverPort.setText(Integer.toString(this.config.getServerPort()));
        serverPort.setName("serverPort"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(edu.wright.cs.carl.apps.wartapp.WartApp.class).getContext().getActionMap(ServerSettings.class, this);
        jButton1.setAction(actionMap.get("updateServerSettings")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("closeServerSettings")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jButton3.setAction(actionMap.get("okServerSettings")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        autostartServer.setSelected(this.config.getAutoStartServer());
        autostartServer.setText(resourceMap.getString("autostartServer.text")); // NOI18N
        autostartServer.setActionCommand(resourceMap.getString("autostartServer.actionCommand")); // NOI18N
        autostartServer.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        autostartServer.setName("autostartServer"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        serverProtocolComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RMI", "TCP", "Serial (Local)" }));
        serverProtocolComboBox.setName("serverProtocolComboBox"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        maxConnections.setText(Integer.toString(this.config.getMaxNumHandles()));
        maxConnections.setName("maxConnections"); // NOI18N

        serverRunningWarning.setText(resourceMap.getString("serverRunningWarning.text")); // NOI18N
        serverRunningWarning.setName("serverRunningWarning"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(232, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxConnections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(autostartServer)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serverProtocolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(153, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(serverName, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addGap(20, 20, 20)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverRunningWarning, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(serverName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(maxConnections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autostartServer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(serverProtocolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(serverRunningWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void closeServerSettings()
    {
        this.setVisible(false);
    }

    @Action
    public void updateServerSettings()
    {
        this.config.setAutoStartServer(this.autostartServer.isSelected());
        this.config.setServerName(this.serverName.getText());
        this.config.setMaxNumHandles(Integer.parseInt(this.maxConnections.getText()));
        this.config.setServerPort(Integer.parseInt(this.serverPort.getText()));


        /*
        //
        // If the port number changed, update the listener.
        //
        int newPort = Integer.parseInt(this.serverPort.getText());
        if(newPort != this.lastPort) {
            
            ConnectionListener oldListener = this.currentListener;
        
            //
            // First, try to create a listener using the new port.
            //
            try {
                this.currentListener = new RMIConnectionListener(this.server, newPort);
            }
            catch(RemoteException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "RMI Remote Exception - Cannot create connection listener!");
                
                this.currentListener = oldListener;
                this.serverPort.setText(Integer.toString(this.lastPort));
                return;
            }        

            //
            // If successful, update the connection listener manager with the
            // new listener.
            //
            try {
                this.listeners.remove(oldListener.getUniqueID());
                this.listeners.add(currentListener);
                this.config.setServerPort(newPort);
                this.lastPort = newPort;
            }
            catch(IOException e) {
                e.printStackTrace();
                throw new AssertionError(e);
            }
            catch(ServerException e) {
                throw new AssertionError(e);
            }

        }
         */
    }

    @Action
    public void okServerSettings()
    {
        this.updateServerSettings();
        this.closeServerSettings();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autostartServer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField maxConnections;
    private javax.swing.JTextField serverName;
    private javax.swing.JTextField serverPort;
    private javax.swing.JComboBox serverProtocolComboBox;
    private javax.swing.JLabel serverRunningWarning;
    // End of variables declaration//GEN-END:variables

}
