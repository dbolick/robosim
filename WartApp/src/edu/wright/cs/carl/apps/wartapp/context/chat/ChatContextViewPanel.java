/*
 * ChatContextViewPanel.java
 *
 * Created on December 15, 2008, 12:07 PM
 */

package edu.wright.cs.carl.apps.wartapp.context.chat;

import java.io.IOException;

import java.util.Iterator;

import javax.swing.*;

import org.jdesktop.application.Action;

import edu.wright.cs.carl.net.message.*;
import edu.wright.cs.carl.net.message.payload.*;

import edu.wright.cs.carl.security.PermissionException;

import edu.wright.cs.carl.apps.wartapp.swing.*;


/**
 *
 * @author  Duane
 */
public class ChatContextViewPanel extends AbstractWartViewPanel
{
    private DefaultListModel userListModel;
    
    public ChatContextViewPanel()
    {
        userListModel = new DefaultListModel();
    }

    @Override
    public void doInit()
    {
        initComponents();
        this.refreshUserListModel();
    }

    public void refreshUserListModel()
    {
        this.userListModel.removeAllElements();

        try {
            Iterator<String> it = this.contextHandle.getClientList().iterator();

            while(it.hasNext()) {
                this.userListModel.addElement(it.next());
            }
        }
        catch(IOException e) {
            this.lostConnection(e);
            return;
        }
    }

    /**
     * Refresh the components of this panel.
     */
    @Override
    public void refreshPanelComponents()
    {
        this.refreshUserListModel();
    }   

    public void postMessage(String message)
    {
        this.chatOutputArea.append(message);
    }
    
    public void updateUserList(String username, UserStatusChange.Type actionType)
    {
        /*
        if(actionType == UserStatusChange.Type.LOGON) {
            this.userListModel.addElement(username);
        }
        else if (actionType == UserStatusChange.Type.LOGOFF) {
            this.userListModel.removeElement(username);
        }
         */
        this.refreshUserListModel();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatOutputArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        messageInputField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        chatOutputArea.setColumns(20);
        chatOutputArea.setEditable(false);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.wright.cs.carl.apps.wartapp.WartApp.class).getContext().getResourceMap(ChatContextViewPanel.class);
        chatOutputArea.setFont(resourceMap.getFont("chatOutputArea.font")); // NOI18N
        chatOutputArea.setLineWrap(true);
        chatOutputArea.setRows(5);
        chatOutputArea.setName("chatOutputArea"); // NOI18N
        jScrollPane1.setViewportView(chatOutputArea);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        userList.setModel(this.userListModel);
        userList.setName("userList"); // NOI18N
        jScrollPane2.setViewportView(userList);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(edu.wright.cs.carl.apps.wartapp.WartApp.class).getContext().getActionMap(ChatContextViewPanel.class, this);
        jButton1.setAction(actionMap.get("kickUser")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        messageInputField.setText(resourceMap.getString("messageInputField.text")); // NOI18N
        messageInputField.setName("messageInputField"); // NOI18N
        messageInputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextInputKeyPressedHandler(evt);
            }
        });

        jButton2.setAction(actionMap.get("sendMessage")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(messageInputField, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(messageInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void TextInputKeyPressedHandler(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextInputKeyPressedHandler

    if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
        this.sendMessage();
    }
}//GEN-LAST:event_TextInputKeyPressedHandler

    @Action
    public void sendMessage()
    {
        String chatInput = this.messageInputField.getText();
        
        if(chatInput.isEmpty()) {
            return;
        }
        
        if(this.contextHandle == null) {
            JOptionPane.showMessageDialog(this.getRootPane(), "Context Handle is null!");
            return;
        }
        
        try {            
            this.contextHandle.sendMessagePayload(new SimpleText(chatInput));
        }
        catch(MessagingException e) {
            JOptionPane.showMessageDialog(this.getRootPane(), e.getMessage());
        }
        catch(MessageTypeException e) {
            JOptionPane.showMessageDialog(this.getRootPane(), e.getMessage());
        }
        catch(PermissionException e) {
            JOptionPane.showMessageDialog(this.getRootPane(), e.getMessage());
        }
        catch(IOException e) {
            this.lostConnection(e);
            return;
        }
        
        this.messageInputField.setText(null);
    }

    @Action
    public void kickUser()
    {
        int selectedIndex = this.userList.getSelectedIndex();
        if(selectedIndex < 0) {
            return;
        }

        String kickedUsername = (String) this.userList.getSelectedValue();

        try {
            this.contextHandle.sendMessagePayload(new UserRemovalRequest(kickedUsername));
        }
        catch(MessagingException e) {
            JOptionPane.showMessageDialog(this.getRootPane(), e.getMessage());
        }
        catch(MessageTypeException e) {
            JOptionPane.showMessageDialog(this.getRootPane(), e.getMessage());
        }
        catch(PermissionException e) {
            JOptionPane.showMessageDialog(this.getRootPane(), e.getMessage());
        }
        catch(IOException e) {
            this.lostConnection(e);
            return;
        }


    }


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatOutputArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField messageInputField;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

}
